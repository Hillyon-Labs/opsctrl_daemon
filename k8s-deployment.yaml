---
# ServiceAccount for the opsctrl-daemon
apiVersion: v1
kind: ServiceAccount
metadata:
  name: opsctrl-daemon
  namespace: default
---
# ClusterRole with necessary permissions
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: opsctrl-daemon
rules:
- apiGroups: [""]
  resources: ["pods", "namespaces"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["events"]
  verbs: ["get", "list", "watch", "create"]
# Leader election permissions
- apiGroups: ["coordination.k8s.io"]
  resources: ["leases"]
  verbs: ["get", "list", "watch", "create", "update", "patch"]
---
# ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: opsctrl-daemon
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: opsctrl-daemon
subjects:
- kind: ServiceAccount
  name: opsctrl-daemon
  namespace: default
---
# ConfigMap for configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: opsctrl-daemon-config
  namespace: default
data:
  NODE_ENV: "production"
  LOG_LEVEL: "info"
  
  # Monitoring configuration
  EXCLUDE_NAMESPACES: "kube-system,kube-public,kube-node-lease"
  MIN_RESTART_THRESHOLD: "3"
  MAX_PENDING_DURATION_MS: "600000"
  ENABLE_CRASH_LOOP_DETECTION: "true"
  ENABLE_IMAGE_PULL_FAILURE_DETECTION: "true"
  ENABLE_RESOURCE_LIMIT_DETECTION: "true"
  
  # Diagnosis configuration
  DIAGNOSIS_ENABLED: "true"
  DIAGNOSIS_TIMEOUT_MS: "30000"
  DIAGNOSIS_CACHE_TTL_MS: "300000"
  DIAGNOSIS_CACHE_MAX_ENTRIES: "1000"
  
  # Alerting configuration
  ALERT_MAX_ATTEMPTS: "3"
  ALERT_BACKOFF_MS: "1000"
  ALERT_MAX_BACKOFF_MS: "30000"
  ALERT_SEVERITY_FILTERS: "medium,high,critical"
  ALERT_RATE_LIMIT_WINDOW_MINUTES: "5"
  INCLUDE_FULL_MANIFESTS: "false"
  
  # Resilience configuration
  RECONNECTION_ENABLED: "true"
  RECONNECTION_INITIAL_BACKOFF_MS: "1000"
  RECONNECTION_MAX_BACKOFF_MS: "30000"
  RECONNECTION_BACKOFF_MULTIPLIER: "2"
  RECONNECTION_MAX_FAILURES: "5"
  
  # Health check configuration
  ENABLE_HEALTH_CHECK: "true"
  HEALTH_CHECK_PORT: "3000"
  
  # Deployment-specific configuration
  DEPLOYMENT_MODE: "true"
  ENABLE_LEADER_ELECTION: "true"
  LEADER_ELECTION_NAMESPACE: "default"
  LEADER_ELECTION_NAME: "opsctrl-daemon-leader"
  
  # Cluster registration configuration
  CLUSTER_NAME: ""      # Will be overridden by Helm
  USER_EMAIL: ""        # Will be overridden by Helm
  OPSCTRL_BACKEND_URL: "https://api.opsctrl.io"
  SKIP_CLUSTER_REGISTRATION: "false"
---
# Secret for sensitive configuration
apiVersion: v1
kind: Secret
metadata:
  name: opsctrl-daemon-secrets
  namespace: default
type: Opaque
stringData:
  WEBHOOK_URL: "https://hooks.slack.com/services/YOUR/WEBHOOK/URL"
---
# Deployment for centralized monitoring
apiVersion: apps/v1
kind: Deployment
metadata:
  name: opsctrl-daemon
  namespace: default
  labels:
    app: opsctrl-daemon
    version: v1.0.0
spec:
  # High availability with 2 replicas + leader election
  replicas: 2
  
  selector:
    matchLabels:
      app: opsctrl-daemon
  
  # Rolling update strategy
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0  # Always keep at least 1 running
      maxSurge: 1
  
  template:
    metadata:
      labels:
        app: opsctrl-daemon
      annotations:
        configmap-hash: "UPDATE_ON_CONFIG_CHANGE"
    spec:
      serviceAccountName: opsctrl-daemon
      
      # Security context
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
      
      # Pod anti-affinity to spread replicas across nodes
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - opsctrl-daemon
              topologyKey: kubernetes.io/hostname
      
      containers:
      - name: opsctrl-daemon
        image: opsctrl-daemon:latest
        imagePullPolicy: Always
        
        # Security context
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1001
          capabilities:
            drop:
            - ALL
        
        # Environment variables
        envFrom:
        - configMapRef:
            name: opsctrl-daemon-config
        - secretRef:
            name: opsctrl-daemon-secrets
        
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        
        # Resource requests/limits (can be higher since only 1-2 pods)
        resources:
          limits:
            memory: "512Mi"
            cpu: "500m"
          requests:
            memory: "256Mi"
            cpu: "100m"
        
        # Health checks
        livenessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        
        readinessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 15
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        
        ports:
        - name: health
          containerPort: 3000
          protocol: TCP
        
        # Volume mounts
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: app-tmp
          mountPath: /app/tmp
      
      volumes:
      - name: tmp
        emptyDir: {}
      - name: app-tmp
        emptyDir: {}
      
      # Prefer running on different nodes for HA
      nodeSelector:
        kubernetes.io/os: linux
---
# Service for the deployment
apiVersion: v1
kind: Service
metadata:
  name: opsctrl-daemon
  namespace: default
  labels:
    app: opsctrl-daemon
spec:
  type: ClusterIP
  ports:
  - name: health
    port: 3000
    targetPort: 3000
    protocol: TCP
  selector:
    app: opsctrl-daemon
---
# PodDisruptionBudget for availability during updates
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: opsctrl-daemon
  namespace: default
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: opsctrl-daemon