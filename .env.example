# opsctrl-daemon Environment Configuration
# Copy this file to .env.local and customize for your environment

# ====================================
# APPLICATION CONFIGURATION
# ====================================
NODE_ENV=development
LOG_LEVEL=info

# ====================================
# MONITORING CONFIGURATION
# ====================================

# Namespaces to monitor (comma-separated, leave empty for all accessible)
WATCH_NAMESPACES=

# Namespaces to exclude from monitoring (comma-separated)
EXCLUDE_NAMESPACES=kube-system,kube-public,kube-node-lease

# Minimum container restart count to trigger failure detection
MIN_RESTART_THRESHOLD=3

# Maximum time a pod can remain in Pending state (milliseconds)
MAX_PENDING_DURATION_MS=600000

# Enable detection of crash loop back-off patterns
ENABLE_CRASH_LOOP_DETECTION=true

# Enable detection of image pull failures
ENABLE_IMAGE_PULL_FAILURE_DETECTION=true

# Enable detection of resource limit violations
ENABLE_RESOURCE_LIMIT_DETECTION=true

# ====================================
# DIAGNOSIS CONFIGURATION
# ====================================

# Enable/disable automated diagnosis execution
DIAGNOSIS_ENABLED=true

# Timeout for diagnosis command execution (milliseconds)
DIAGNOSIS_TIMEOUT_MS=30000

# Time-to-live for cached diagnosis results (milliseconds)
DIAGNOSIS_CACHE_TTL_MS=300000

# Maximum number of entries to keep in diagnosis cache
DIAGNOSIS_CACHE_MAX_ENTRIES=1000

# opsctrl command integration
OPSCTRL_COMMAND=npm
OPSCTRL_ARGS=run dev -- diagnose
OPSCTRL_WORKING_DIR=.

# ====================================
# ALERTING CONFIGURATION
# ====================================

# Webhook URL for sending alerts (required for alerting)
# Example: https://hooks.slack.com/services/YOUR/WEBHOOK/URL
WEBHOOK_URL=

# Maximum number of retry attempts for failed alert deliveries
ALERT_MAX_ATTEMPTS=3

# Initial backoff delay for alert retries (milliseconds)
ALERT_BACKOFF_MS=1000

# Maximum backoff delay for alert retries (milliseconds)
ALERT_MAX_BACKOFF_MS=30000

# Severity levels that should trigger alerts (comma-separated)
# Options: informational,low,medium,high,critical
ALERT_SEVERITY_FILTERS=medium,high,critical

# Rate limiting window for alerts (minutes, 0 to disable)
ALERT_RATE_LIMIT_WINDOW_MINUTES=5

# Include full pod manifests in alert payloads
INCLUDE_FULL_MANIFESTS=false

# ====================================
# RESILIENCE CONFIGURATION
# ====================================

# Enable/disable automatic reconnection on connection failures
RECONNECTION_ENABLED=true

# Initial backoff delay for reconnection attempts (milliseconds)
RECONNECTION_INITIAL_BACKOFF_MS=1000

# Maximum backoff delay for reconnection attempts (milliseconds)
RECONNECTION_MAX_BACKOFF_MS=30000

# Multiplier for exponential backoff calculation
RECONNECTION_BACKOFF_MULTIPLIER=2

# Maximum consecutive failures before giving up reconnection
RECONNECTION_MAX_FAILURES=5

# ====================================
# HEALTH CHECK CONFIGURATION
# ====================================

# Enable HTTP health check server
ENABLE_HEALTH_CHECK=true

# Port for health check server
HEALTH_CHECK_PORT=3000

# ====================================
# DEVELOPMENT CONFIGURATION
# ====================================

# Enable development features (detailed logging, etc.)
DEVELOPMENT_MODE=false

# Enable debug output for Kubernetes client
KUBERNETES_DEBUG=false

# Custom kubeconfig path (leave empty for default)
KUBECONFIG_PATH=

# ====================================
# PERFORMANCE TUNING
# ====================================

# Node.js memory settings (uncomment if needed)
# NODE_OPTIONS=--max-old-space-size=512

# Garbage collection settings (uncomment if needed)
# NODE_OPTIONS=--expose-gc --optimize-for-size

# ====================================
# EXAMPLE CONFIGURATIONS
# ====================================

# Example: Monitor only production namespaces
# WATCH_NAMESPACES=production,staging,api-services

# Example: Slack webhook configuration
# WEBHOOK_URL=https://hooks.slack.com/services/T00000000/B00000000/XXXXXXXXXXXXXXXXXXXXXXXX

# Example: High-sensitivity monitoring
# MIN_RESTART_THRESHOLD=1
# MAX_PENDING_DURATION_MS=300000
# ALERT_SEVERITY_FILTERS=low,medium,high,critical

# Example: Performance tuning for large clusters
# DIAGNOSIS_CACHE_MAX_ENTRIES=5000
# DIAGNOSIS_CACHE_TTL_MS=600000
# RECONNECTION_MAX_BACKOFF_MS=60000

# ====================================
# SECURITY NOTES
# ====================================

# IMPORTANT: 
# - Never commit .env files with sensitive data to version control
# - Use .env.local for local development overrides
# - In production, use Kubernetes Secrets or your platform's secret management
# - The WEBHOOK_URL contains sensitive credentials - protect it carefully
# - Consider using environment-specific .env files (.env.development, .env.production)

# ====================================
# KUBERNETES DEPLOYMENT NOTES
# ====================================

# When deploying to Kubernetes:
# - These variables are set via ConfigMap (non-sensitive) and Secret (sensitive)
# - See k8s-deployment.yaml for the complete configuration
# - The pod will automatically discover the Kubernetes API using the service account
# - No KUBECONFIG_PATH needed when running in-cluster