[
  {
    "id": "image-pull-backoff",
    "match": {
      "containerStates": ["ImagePullBackOff"],
      "events": ["Back-off pulling image"]
    },
    "diagnosis": {
      "confidence_score": 1.0,
      "diagnosis_summary": "Container image could not be pulled.",
      "suggested_fix": "Check the image name and tag. If private, set up imagePullSecrets.",
      "incident_tags": ["ImagePullBackOff", "RegistryAuth"]
    }
  },
  {
    "id": "crashloop-generic",
    "match": {
      "containerStates": ["CrashLoopBackOff"]
    },
    "diagnosis": {
      "confidence_score": 0.6,
      "diagnosis_summary": "Container is restarting repeatedly (CrashLoopBackOff).",
      "suggested_fix": "Check logs and container exit code to determine the root cause.",
      "incident_tags": ["CrashLoop"]
    }
  },

  {
    "id": "oomkilled-container",
    "match": {
      "containerStates": ["OOMKilled"]
    },
    "diagnosis": {
      "confidence_score": 0.97,
      "diagnosis_summary": "Container was killed due to out-of-memory (OOM).",
      "suggested_fix": "Increase memory limits or optimize memory usage.",
      "incident_tags": ["OOM", "Memory", "Crash"]
    }
  },
  {
    "id": "dns-resolution-error",
    "match": {
      "logs": [
        { "type": "string", "value": "no such host" },
        { "type": "regex", "value": "lookup .* on .*:53: server misbehaving" }
      ]
    },
    "diagnosis": {
      "confidence_score": 0.9,
      "diagnosis_summary": "Pod failed to resolve a hostname.",
      "suggested_fix": "Check if the target service or DNS name exists. Investigate CoreDNS logs.",
      "incident_tags": ["DNS", "Network"]
    }
  },
  {
    "id": "liveness-probe-failure",
    "match": {
      "events": ["Liveness probe failed"]
    },
    "diagnosis": {
      "confidence_score": 0.85,
      "diagnosis_summary": "Liveness probe repeatedly failed.",
      "suggested_fix": "Check the probe path, response codes, and container health.",
      "incident_tags": ["Probe", "Liveness"]
    }
  },
  {
    "id": "readiness-probe-failure",
    "match": {
      "events": ["Readiness probe failed"]
    },
    "diagnosis": {
      "confidence_score": 0.85,
      "diagnosis_summary": "Readiness probe repeatedly failed.",
      "suggested_fix": "Ensure the service becomes ready after startup. Check timeouts and startup logic.",
      "incident_tags": ["Probe", "Readiness"]
    }
  },

  {
    "id": "readiness-probe-http-error",
    "match": {
      "events": [
        { "type": "regex", "value": "Readiness probe failed: Error: Got HTTP code \\d{3}" }
      ]
    },
    "diagnosis": {
      "confidence_score": 0.85,
      "diagnosis_summary": "Readiness probe failed due to an HTTP error.",
      "suggested_fix": "Ensure the container serves a 200 OK response during readiness probe window. Adjust delay, timeout, or probe path as needed.",
      "incident_tags": ["Readiness", "Probe", "HTTPError"]
    }
  },

  {
    "id": "permission-denied",
    "match": {
      "logs": [{ "type": "string", "value": "permission denied" }]
    },
    "diagnosis": {
      "confidence_score": 0.8,
      "diagnosis_summary": "Container encountered a file or network permission error.",
      "suggested_fix": "Check mounted volumes and securityContext. Consider adjusting user permissions.",
      "incident_tags": ["Permissions", "Filesystem"]
    }
  },
  {
    "id": "image-not-found",
    "match": {
      "logs": [{ "type": "regex", "value": ".*manifest.*not found" }]
    },
    "diagnosis": {
      "confidence_score": 0.95,
      "diagnosis_summary": "Image manifest could not be found.",
      "suggested_fix": "Verify image name and tag exist in registry.",
      "incident_tags": ["ImagePull", "Registry"]
    }
  },
  {
    "id": "host-port-conflict",
    "match": {
      "logs": [{ "type": "string", "value": "port is already allocated" }]
    },
    "diagnosis": {
      "confidence_score": 0.9,
      "diagnosis_summary": "A container is trying to bind a host port that is already in use.",
      "suggested_fix": "Use a different host port or avoid hostPort usage.",
      "incident_tags": ["Networking", "HostPort"]
    }
  },
  {
    "id": "failed-to-start-container",
    "match": {
      "logs": [{ "type": "string", "value": "failed to start container" }]
    },
    "diagnosis": {
      "confidence_score": 0.85,
      "diagnosis_summary": "Kubelet failed to start the container.",
      "suggested_fix": "Check image entrypoint, resources, and init container status.",
      "incident_tags": ["Runtime", "Startup"]
    }
  },
  {
    "id": "x509-certificate-error",
    "match": {
      "logs": [
        { "type": "string", "value": "x509: certificate" },
        { "type": "regex", "value": "x509: certificate.*has expired" }
      ]
    },
    "diagnosis": {
      "confidence_score": 0.92,
      "diagnosis_summary": "TLS error due to invalid or expired certificate.",
      "suggested_fix": "Check mounted secrets or update the certificate source.",
      "incident_tags": ["TLS", "Security"]
    }
  },
  {
    "id": "service-unavailable",
    "match": {
      "logs": [{ "type": "regex", "value": "503 Service Unavailable" }]
    },
    "diagnosis": {
      "confidence_score": 0.8,
      "diagnosis_summary": "Service returned 503 - likely due to backend being down.",
      "suggested_fix": "Check backend readiness, probes, or network policies.",
      "incident_tags": ["HTTP", "ServiceMesh"]
    }
  },
  {
    "id": "panic-stack-trace",
    "match": {
      "logs": [{ "type": "regex", "value": "panic: .*" }]
    },
    "diagnosis": {
      "confidence_score": 0.9,
      "diagnosis_summary": "Application encountered a panic (fatal error).",
      "suggested_fix": "Check app logs and runtime. Consider adding better error recovery.",
      "incident_tags": ["AppCrash", "Go", "Panic"]
    }
  },
  {
    "id": "segmentation-fault",
    "match": {
      "logs": [{ "type": "string", "value": "segmentation fault" }]
    },
    "diagnosis": {
      "confidence_score": 0.88,
      "diagnosis_summary": "Native crash due to segmentation fault.",
      "suggested_fix": "Check native library usage, memory limits, or debugging symbols.",
      "incident_tags": ["Crash", "Native", "C++"]
    }
  },
  {
    "id": "disk-full",
    "match": {
      "logs": [{ "type": "regex", "value": "no space left on device" }]
    },
    "diagnosis": {
      "confidence_score": 0.95,
      "diagnosis_summary": "Disk or volume is full.",
      "suggested_fix": "Free up space or resize the persistent volume.",
      "incident_tags": ["Storage", "Volume", "PVC"]
    }
  },
  {
    "id": "init-container-failed",
    "match": {
      "containerStates": ["Terminated: Error"],
      "events": ["Back-off restarting failed container"]
    },
    "diagnosis": {
      "confidence_score": 0.9,
      "diagnosis_summary": "Init container failed and blocked main container.",
      "suggested_fix": "Check init container logs for the failure reason.",
      "incident_tags": ["InitContainer", "Startup"]
    }
  }
]
